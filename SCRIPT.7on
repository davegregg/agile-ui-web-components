SLIDE 7/0

    // Change the slide to read "A Call for a Different Workflow"

    This is where we start with the soft part of this presentation.
    Consider this a call and a catalyst for a conversation about
    developing a different way that we engage the needs of our users.
    While I originally presented this talk in the context of user
    experience, I have expanded the ideas. However, I will constrain
    this presentation to the user experience aspects.

SLIDE 7/1

    // Change the slide to read "interaction-driven development"

    The pathetic fallacy informs us that when we give a name to
    something, then we end up caring more about it. So, I've given the
    name "interaction-driven development" to this thing. Instead of
    organizing our development around functionality in user stories or
    use cases, we slice through the layers of our software to muster
    our effort around completing interactions that the software has,
    either with the user, other applications, within its own
    architecture, or because of environmental influences.

    For the purpose of this presentation, again, I limit the
    monologue to the user experience aspect of interaction-driven
    development.

SLIDE 7/2

    I tend to design things from the bottom-up. In-as-much, I have identified
    some common tactics that can perform the basis of "interaction-driven
    development". Paradoxically, IDD has formed in my mind as a top-down
    development methodology, one that engages continual refinement as the
    cornerstone on which to develop. As my drill seargeant used to yell at us,
    "Shoot! Aim! Shoot!". In terms of IDD, this means that we design and
    implement from low fidelity to high fidelity.

    It's probably best if I provide an example of how to apply these tactics
    with respect to the power that Web components allows us to wield.

SLIDE 7/3

    // Remove

SLIDE 8

    But, before I get to an example of IDD, I want to spend a moment